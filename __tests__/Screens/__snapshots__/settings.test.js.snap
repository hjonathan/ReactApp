// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Screen >>> Settings _onChangeExternalLibs function 1`] = `undefined`;

exports[`Screen >>> Settings _onChangeLanguage function 1`] = `undefined`;

exports[`Screen >>> Settings _onChangeLanguage function 2`] = `undefined`;

exports[`Screen >>> Settings _onChangeServerUrl function 1`] = `undefined`;

exports[`Screen >>> Settings _onChangeServerUrl function 2`] = `undefined`;

exports[`Screen >>> Settings _onChangeWorkspace function 1`] = `undefined`;

exports[`Screen >>> Settings _onChangeWorkspace function 2`] = `undefined`;

exports[`Screen >>> Settings Check static navigationOptions 1`] = `
<TouchableOpacity
  activeOpacity={0.2}
  onPress={[Function]}
  style={
    Object {
      "padding": 16,
    }
  }
>
  <Icon
    allowFontScaling={false}
    name="arrow-back"
    size={12}
    style={
      Object {
        "color": "#FFF",
        "fontSize": 24,
      }
    }
  />
</TouchableOpacity>
`;

exports[`Screen >>> Settings OnPress sections 1`] = `undefined`;

exports[`Screen >>> Settings OnPress sections 2`] = `undefined`;

exports[`Screen >>> Settings OnPress sections 3`] = `undefined`;

exports[`Screen >>> Settings OnPress sections 4`] = `undefined`;

exports[`Screen >>> Settings OnPress sections 5`] = `undefined`;

exports[`Screen >>> Settings OnPress sections 6`] = `undefined`;

exports[`Screen >>> Settings Render Settings view 1`] = `
<Component
  style={
    Object {
      "flex": 1,
    }
  }
>
  <ScrollView
    contentContainerStyle={
      Object {
        "flexGrow": 1,
      }
    }
    keyboardDismissMode="on-drag"
    keyboardShouldPersistTaps="always"
  >
    <Component
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <Component
        style={
          Object {
            "padding": 16,
          }
        }
      >
        <Component
          style={
            Object {
              "paddingBottom": 16,
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#009688",
                "fontSize": 14,
                "fontWeight": "bold",
              }
            }
          >
            preference_end_point_settings
          </Text>
          <TouchableHighlight
            activeOpacity={0.85}
            delayPressOut={100}
            onPress={[Function]}
            underlayColor="#E1E3E8"
          >
            <Component
              style={
                Object {
                  "paddingVertical": 12,
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Object {
                    "color": "#000",
                    "fontSize": 16,
                  }
                }
              >
                preference_end_point_chose
              </Text>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
              />
            </Component>
          </TouchableHighlight>
          <Component
            style={
              Object {
                "backgroundColor": "#ccc",
                "height": 1,
                "width": "100%",
              }
            }
          />
          <TouchableHighlight
            activeOpacity={0.85}
            delayPressOut={100}
            onPress={[Function]}
            underlayColor="#E1E3E8"
          >
            <Component
              style={
                Object {
                  "paddingVertical": 12,
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Object {
                    "color": "#000",
                    "fontSize": 16,
                  }
                }
              >
                preference_end_point_name
              </Text>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
              />
            </Component>
          </TouchableHighlight>
        </Component>
        <Component
          style={
            Object {
              "paddingBottom": 16,
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#009688",
                "fontSize": 14,
                "fontWeight": "bold",
              }
            }
          >
            preference_erasercache_Title
          </Text>
          <TouchableHighlight
            activeOpacity={0.85}
            delayPressOut={100}
            onPress={[Function]}
            underlayColor="#E1E3E8"
          >
            <Component
              style={
                Object {
                  "paddingVertical": 12,
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Object {
                    "color": "#000",
                    "fontSize": 16,
                  }
                }
              >
                preference_eraser_sumary
              </Text>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
              >
                preference_erasercache_Title_Clean
              </Text>
            </Component>
          </TouchableHighlight>
          <Component
            style={
              Object {
                "backgroundColor": "#ccc",
                "height": 1,
                "width": "100%",
              }
            }
          />
          <Component
            style={
              Object {
                "flex": 1,
                "flexDirection": "row",
              }
            }
          >
            <TouchableHighlight
              activeOpacity={0.85}
              delayPressOut={100}
              onPress={[Function]}
              style={
                Object {
                  "width": "85%",
                }
              }
              underlayColor="#E1E3E8"
            >
              <Component
                style={
                  Object {
                    "paddingVertical": 12,
                  }
                }
              >
                <Component
                  style={
                    Object {
                      "flexDirection": "row",
                      "justifyContent": "space-between",
                    }
                  }
                >
                  <Component
                    style={
                      Object {
                        "flex": 1,
                        "flexWrap": "wrap",
                      }
                    }
                  >
                    <Text
                      accessible={true}
                      allowFontScaling={true}
                      ellipsizeMode="tail"
                      style={
                        Object {
                          "color": "#000",
                          "fontSize": 16,
                        }
                      }
                    >
                      preference_enable_external_libraries_cache
                    </Text>
                  </Component>
                </Component>
              </Component>
            </TouchableHighlight>
            <Switch
              disabled={false}
              onValueChange={[Function]}
              style={
                Object {
                  "width": "15%",
                }
              }
              value={true}
            />
          </Component>
        </Component>
        <Component
          style={
            Object {
              "paddingBottom": 16,
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#009688",
                "fontSize": 14,
                "fontWeight": "bold",
              }
            }
          >
            preference_language_selection_title
          </Text>
          <TouchableHighlight
            activeOpacity={0.85}
            delayPressOut={100}
            onPress={[Function]}
            underlayColor="#E1E3E8"
          >
            <Component
              style={
                Object {
                  "paddingVertical": 12,
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
              >
                English
              </Text>
            </Component>
          </TouchableHighlight>
        </Component>
        <Component
          style={
            Object {
              "paddingBottom": 16,
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#009688",
                "fontSize": 14,
                "fontWeight": "bold",
              }
            }
          >
            preference_offline_settings
          </Text>
          <TouchableHighlight
            activeOpacity={0.85}
            delayPressOut={100}
            onPress={[Function]}
            underlayColor="#E1E3E8"
          >
            <Component
              style={
                Object {
                  "paddingVertical": 12,
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Object {
                    "color": "#000",
                    "fontSize": 16,
                  }
                }
              >
                preference_offline_download_data
              </Text>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
              >
                preference_offline_data_downloaded
              </Text>
            </Component>
          </TouchableHighlight>
        </Component>
        <Dialog
          onRequestClose={[Function]}
          onTouchOutside={[Function]}
          title="preference_end_point_chose"
          visible={false}
        >
          <Component
            style={
              Object {
                "flexDirection": "column",
                "margin": -8,
              }
            }
          >
            <Component>
              <FormInput
                autoFocus={true}
                defaultValue=""
                inputStyle={
                  Object {
                    "color": "#000",
                    "fontSize": 16,
                  }
                }
                normalizeFontSize={true}
                onChangeText={[Function]}
                underlineColorAndroid="#009688"
              />
            </Component>
            <Component
              style={
                Object {
                  "flexDirection": "row",
                  "justifyContent": "flex-end",
                  "paddingVertical": 8,
                }
              }
            >
              <TouchableHighlight
                activeOpacity={0.85}
                delayPressOut={100}
                onPress={[Function]}
                style={
                  Object {
                    "paddingHorizontal": 16,
                    "paddingVertical": 8,
                  }
                }
                underlayColor="#E1E3E8"
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Object {
                      "color": "#009688",
                      "fontWeight": "bold",
                    }
                  }
                >
                  CANCEL
                </Text>
              </TouchableHighlight>
              <TouchableHighlight
                activeOpacity={0.85}
                delayPressOut={100}
                onPress={[Function]}
                style={
                  Object {
                    "paddingHorizontal": 16,
                    "paddingVertical": 8,
                  }
                }
                underlayColor="#E1E3E8"
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Object {
                      "color": "#009688",
                      "fontWeight": "bold",
                    }
                  }
                >
                  OK
                </Text>
              </TouchableHighlight>
            </Component>
          </Component>
        </Dialog>
        <Dialog
          onRequestClose={[Function]}
          onTouchOutside={[Function]}
          title="preference_end_point_name"
          visible={false}
        >
          <Component
            style={
              Object {
                "flexDirection": "column",
                "margin": -8,
              }
            }
          >
            <Component>
              <FormInput
                autoFocus={true}
                defaultValue=""
                inputStyle={
                  Object {
                    "color": "#000",
                    "fontSize": 16,
                  }
                }
                normalizeFontSize={true}
                onChangeText={[Function]}
                underlineColorAndroid="#009688"
              />
            </Component>
            <Component
              style={
                Object {
                  "flexDirection": "row",
                  "justifyContent": "flex-end",
                  "paddingVertical": 8,
                }
              }
            >
              <TouchableHighlight
                activeOpacity={0.85}
                delayPressOut={100}
                onPress={[Function]}
                style={
                  Object {
                    "paddingHorizontal": 16,
                    "paddingVertical": 8,
                  }
                }
                underlayColor="#E1E3E8"
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Object {
                      "color": "#009688",
                      "fontWeight": "bold",
                    }
                  }
                >
                  CANCEL
                </Text>
              </TouchableHighlight>
              <TouchableHighlight
                activeOpacity={0.85}
                delayPressOut={100}
                onPress={[Function]}
                style={
                  Object {
                    "paddingHorizontal": 16,
                    "paddingVertical": 8,
                  }
                }
                underlayColor="#E1E3E8"
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Object {
                      "color": "#009688",
                      "fontWeight": "bold",
                    }
                  }
                >
                  OK
                </Text>
              </TouchableHighlight>
            </Component>
          </Component>
        </Dialog>
        <Dialog
          onRequestClose={[Function]}
          onTouchOutside={[Function]}
          title="Cache_Erased"
          visible={false}
        >
          <Component
            style={
              Object {
                "flexDirection": "column",
                "margin": -8,
              }
            }
          >
            <Component>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Object {
                    "color": "#000",
                    "fontSize": 16,
                  }
                }
              >
                Message_Cache_Erased
              </Text>
            </Component>
            <Component
              style={
                Object {
                  "flexDirection": "row",
                  "justifyContent": "flex-end",
                  "paddingVertical": 8,
                }
              }
            >
              <TouchableHighlight
                activeOpacity={0.85}
                delayPressOut={100}
                onPress={[Function]}
                style={
                  Object {
                    "paddingHorizontal": 16,
                    "paddingVertical": 8,
                  }
                }
                underlayColor="#E1E3E8"
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Object {
                      "color": "#009688",
                      "fontWeight": "bold",
                    }
                  }
                >
                  CANCEL
                </Text>
              </TouchableHighlight>
              <TouchableHighlight
                activeOpacity={0.85}
                delayPressOut={100}
                onPress={[Function]}
                style={
                  Object {
                    "paddingHorizontal": 16,
                    "paddingVertical": 8,
                  }
                }
                underlayColor="#E1E3E8"
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Object {
                      "color": "#009688",
                      "fontWeight": "bold",
                    }
                  }
                >
                  OK
                </Text>
              </TouchableHighlight>
            </Component>
          </Component>
        </Dialog>
        <Dialog
          onRequestClose={[Function]}
          onTouchOutside={[Function]}
          visible={false}
        >
          <Component
            style={
              Object {
                "flexDirection": "column",
                "margin": -8,
              }
            }
          >
            <CheckBox
              center={false}
              checked={true}
              checkedColor="#009688"
              checkedIcon="radio-button-checked"
              containerStyle={
                Object {
                  "backgroundColor": "transparent",
                  "borderWidth": 0,
                  "padding": 0,
                }
              }
              iconRight={false}
              iconType="material"
              key="en"
              onPress={[Function]}
              right={false}
              size={24}
              textStyle={
                Object {
                  "fontWeight": "normal",
                }
              }
              title="English"
              uncheckedColor="#bfbfbf"
              uncheckedIcon="radio-button-unchecked"
            />
            <CheckBox
              center={false}
              checked={false}
              checkedColor="#009688"
              checkedIcon="radio-button-checked"
              containerStyle={
                Object {
                  "backgroundColor": "transparent",
                  "borderWidth": 0,
                  "padding": 0,
                }
              }
              iconRight={false}
              iconType="material"
              key="es"
              onPress={[Function]}
              right={false}
              size={24}
              textStyle={
                Object {
                  "fontWeight": "normal",
                }
              }
              title="Español"
              uncheckedColor="#bfbfbf"
              uncheckedIcon="radio-button-unchecked"
            />
            <CheckBox
              center={false}
              checked={false}
              checkedColor="#009688"
              checkedIcon="radio-button-checked"
              containerStyle={
                Object {
                  "backgroundColor": "transparent",
                  "borderWidth": 0,
                  "padding": 0,
                }
              }
              iconRight={false}
              iconType="material"
              key="fr"
              onPress={[Function]}
              right={false}
              size={24}
              textStyle={
                Object {
                  "fontWeight": "normal",
                }
              }
              title="Français"
              uncheckedColor="#bfbfbf"
              uncheckedIcon="radio-button-unchecked"
            />
            <CheckBox
              center={false}
              checked={false}
              checkedColor="#009688"
              checkedIcon="radio-button-checked"
              containerStyle={
                Object {
                  "backgroundColor": "transparent",
                  "borderWidth": 0,
                  "padding": 0,
                }
              }
              iconRight={false}
              iconType="material"
              key="pt"
              onPress={[Function]}
              right={false}
              size={24}
              textStyle={
                Object {
                  "fontWeight": "normal",
                }
              }
              title="Portugues"
              uncheckedColor="#bfbfbf"
              uncheckedIcon="radio-button-unchecked"
            />
            <CheckBox
              center={false}
              checked={false}
              checkedColor="#009688"
              checkedIcon="radio-button-checked"
              containerStyle={
                Object {
                  "backgroundColor": "transparent",
                  "borderWidth": 0,
                  "padding": 0,
                }
              }
              iconRight={false}
              iconType="material"
              key="ar"
              onPress={[Function]}
              right={false}
              size={24}
              textStyle={
                Object {
                  "fontWeight": "normal",
                }
              }
              title="العربية"
              uncheckedColor="#bfbfbf"
              uncheckedIcon="radio-button-unchecked"
            />
            <Component
              style={
                Object {
                  "flexDirection": "row",
                  "justifyContent": "flex-end",
                  "paddingVertical": 8,
                }
              }
            >
              <TouchableHighlight
                activeOpacity={0.85}
                delayPressOut={100}
                onPress={[Function]}
                style={
                  Object {
                    "paddingHorizontal": 16,
                    "paddingVertical": 8,
                  }
                }
                underlayColor="#E1E3E8"
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Object {
                      "color": "#009688",
                      "fontWeight": "bold",
                    }
                  }
                >
                  CANCEL
                </Text>
              </TouchableHighlight>
            </Component>
          </Component>
        </Dialog>
        <Toast
          fadeInDuration={500}
          fadeOutDuration={500}
          opacity={1}
          position="bottom"
          positionValue={200}
          style={
            Object {
              "backgroundColor": "#3397E1",
              "marginHorizontal": 24,
            }
          }
          textStyle={
            Object {
              "color": "white",
              "textAlign": "center",
            }
          }
        />
        <ProgressDialog
          message="login_dialog_loading_description_setting_up_process_maker"
          title="login_dialog_loading_title"
          visible={false}
        />
        <ProgressDialog
          message="preference_sync_pmdynaforms_description"
          title="preference_sync_pmdynaforms_title"
        />
      </Component>
    </Component>
  </ScrollView>
</Component>
`;

exports[`Screen >>> Settings Settings connect 1`] = `
<Settings
  error={
    Object {
      "error": "",
      "error_description": "",
    }
  }
  isLoggedIn={true}
  progressShow={false}
  server={
    Object {
      "url": "https://poc-1.processmaker.net",
      "workspace": "workflowpoc1",
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "clear": [Function],
        "get": [Function],
        "notify": [Function],
        "subscribe": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "unsubscribe": [Function],
    }
  }
  syncDown={[Function]}
  updateUrl={[Function]}
  updateWorkspace={[Function]}
/>
`;

exports[`Screen >>> Settings componentWillReceiveProps function 1`] = `undefined`;

exports[`Screen >>> Settings componentWillReceiveProps function 2`] = `undefined`;

exports[`Screen >>> Settings initialSettings function 1`] = `undefined`;

exports[`Screen >>> Settings mapDispatchToProps 1`] = `
Object {
  "payload": Object {
    "url": undefined,
  },
  "type": "settings/updateUrl",
}
`;

exports[`Screen >>> Settings mapDispatchToProps 2`] = `
Object {
  "payload": Object {
    "workspace": undefined,
  },
  "type": "settings/updateWorkspace",
}
`;

exports[`Screen >>> Settings mapDispatchToProps 3`] = `
Object {
  "payload": Object {
    "status": undefined,
  },
  "type": "net/syncDown/request",
}
`;

exports[`Screen >>> Settings mapStateToProps 1`] = `
<Settings
  error={null}
  isLoggedIn={true}
  progressShow={false}
  server={null}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "clear": [Function],
        "get": [Function],
        "notify": [Function],
        "subscribe": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "unsubscribe": [Function],
    }
  }
  syncDown={[Function]}
  updateUrl={[Function]}
  updateWorkspace={[Function]}
/>
`;

exports[`Screen >>> Settings renderDialog CleanCache function 1`] = `undefined`;

exports[`Screen >>> Settings renderDialog CleanCache function 2`] = `undefined`;

exports[`Screen >>> Settings renderDialog CleanCache function 3`] = `undefined`;

exports[`Screen >>> Settings renderDialog Languages function 1`] = `undefined`;

exports[`Screen >>> Settings renderDialog Languages function 2`] = `undefined`;

exports[`Screen >>> Settings renderDialog Languages function 3`] = `undefined`;

exports[`Screen >>> Settings renderDialog ServerUrl function 1`] = `undefined`;

exports[`Screen >>> Settings renderDialog ServerUrl function 2`] = `undefined`;

exports[`Screen >>> Settings renderDialog ServerUrl function 3`] = `undefined`;

exports[`Screen >>> Settings renderDialog ServerUrl function 4`] = `undefined`;

exports[`Screen >>> Settings renderDialog Workspace function 1`] = `undefined`;

exports[`Screen >>> Settings renderDialog Workspace function 2`] = `undefined`;

exports[`Screen >>> Settings renderDialog Workspace function 3`] = `undefined`;

exports[`Screen >>> Settings updateServer function 1`] = `undefined`;
